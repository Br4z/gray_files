#!/bin/bash
#  ______   __  __   __   __       ______   ______   ______   __       ______
# /\  == \ /\ \/\ \ /\ "-.\ \     /\  ___\ /\  ___\ /\  __ \ /\ \     /\  __ \
# \ \  __< \ \ \_\ \\ \ \-.  \    \ \___  \\ \ \____\ \  __ \\ \ \____\ \  __ \
#  \ \_\ \_\\ \_____\\ \_\\"\_\    \/\_____\\ \_____\\ \_\ \_\\ \_____\\ \_\ \_\
#   \/_/ /_/ \/_____/ \/_/ \/_/     \/_____/ \/_____/ \/_/\/_/ \/_____/ \/_/\/_/


source "$HOME/.local/bin/colors_and_helpers" || { error "colors and helpers file not found"; exit 1; }
set -uo pipefail

# --------------------------- DEFAULT AND CONSTANTS -------------------------- #

OUTPUT_DIR="out"
MAIN_CLASS="Main"
SCALA_CMD="scala3"
SCALAC_CMD="scalac3"
SCALAC_FLAGS=()

# ------------------------------- USAGE BANNER ------------------------------- #

usage() {
  cat <<EOF
Usage: $(basename "$0") [OPTIONS] [--] [program-args ...]

Modes (choose one):
	-s|--single FILE  Compile a single .scala file.
	[no -s] (default) Project mode - compile all *.scala under \$PWD.

General options:
	-k|--keep    Keep compiled .class files/directories after execution.
	-v|--verbose Print compilation commands.
	-h|--help    Show this help and exit.
All remaining arguments after "--" are passed to the program.
EOF
}

# ----------------------------- PARSE CLI OPTIONS ---------------------------- #

single_file=
keep_compiled=false
verbose=false

# GNU getopt gives long-option support that plain getopts lacks
PARSED=$(getopt -o s:kvh --long single:,keep,verbose,help -- "$@") || {
	error "parsing arguments"
	exit 1
}

eval set -- "$PARSED"
while true; do
	case "$1" in
		-s|--single)
			single_file=$2
			shift 2
			;;
		-k|--keep)
			keep_compiled=true
			shift
			;;
		-v|--verbose)
			verbose=true
			shift
			;;
		-h|--help)
			usage
			exit 0
			;;
		--)
			shift
			break
			;;
		*)
			error "unknown option: $1"
			usage
			exit 2
			;;
	esac
done

# Remaining tokens are runtime arguments for the compiled program
prog_args=("$@")

# ----------------------------- COMPILATION PHASE ---------------------------- #

compile() {
	mkdir -p "$OUTPUT_DIR"
	local sources=()
	if [[ -n $single_file ]]; then
		[[ -f $single_file ]] \
			|| { error "source file \"$single_file\" not found"; exit 1; }
		sources=("$single_file")
		$verbose && info "Compiling single file: $single_file into $OUTPUT_DIR"
	else
		mapfile -t sources < <(find . -type f -name "*.scala")
		[[ ${#sources[@]} -gt 0 ]] \
			|| { error "no .scala files found"; exit 1; }
	fi

	$verbose && info "Compiling with: ${SCALAC_CMD} -d ${OUTPUT_DIR} ${SCALAC_FLAGS[*]} ${sources[*]}"
	$SCALAC_CMD -d "$OUTPUT_DIR" "${SCALAC_FLAGS[@]}" "${sources[@]}"
}

# ------------------------------ CLEANUP HANDLER ----------------------------- #

cleanup() {
	$keep_compiled || rm -rf "$OUTPUT_DIR"
}
trap cleanup EXIT

# ---------------------------- COMPILE AND EXECUTE --------------------------- #

compile
if [[ -n $single_file ]]; then
	class_name=$(basename "$single_file" .scala)
	$verbose && info "Running class $class_name"
	$SCALA_CMD --classpath "$OUTPUT_DIR" --main-class "$class_name" "${prog_args[@]}"
else
	$verbose && info "Running main class $MAIN_CLASS with -classpath $OUTPUT_DIR"
	$SCALA_CMD --classpath "$OUTPUT_DIR" --main-class "$MAIN_CLASS" "${prog_args[@]}"
fi
exit_code=$?

exit $exit_code
